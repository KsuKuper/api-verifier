{
	"info": {
		"_postman_id": "10b5f33c-688a-4684-aacd-9f71fcb75fda",
		"name": "Verifier",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20300544-10b5f33c-688a-4684-aacd-9f71fcb75fda"
	},
	"item": [
		{
			"name": "Task-resource",
			"item": [
				{
					"name": "login_admin",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf8aef9d-ea0d-47be-8a74-378e28adba97",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body contains id_token\", function () {",
											"    pm.expect(jsonBody).to.have.property(\"id_token\");",
											"    pm.collectionVariables.set(\"id_token\", jsonBody.id_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0d8fc065-9b37-4a36-b30b-94d78c586cba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/login"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"rememberMe\": false\n}"
								},
								"url": {
									"raw": "{{baseURL}}/api/authenticate",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"id": "71e2d4be-22ba-4351-8722-b9e00150330e"
				},
				{
					"name": "Positive tests",
					"item": [
						{
							"name": "create a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a4ca795-6ebd-45b2-9166-6ea09febdd43",
										"exec": [
											"let jsonBody = pm.response.json();",
											"",
											"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
											"pm.collectionVariables.set(\"id\", jsonBody.id);",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"  const responseBody = pm.response.text();",
											"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
											"});",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
											"});",
											"pm.test(\"Response headers contain the expected content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code name is 'Created'\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
											"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
											"});",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56713d66-d314-4f37-ab1c-ccb06ff611a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7f9df8f3-342e-4313-9c74-4ad265271e06",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept-Language",
										"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
									},
									{
										"key": "Cookie",
										"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8080/task?page=1&sort=id,asc"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8080"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{id_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Did you create a new task?\",\n    \"text\": \"Did you create a new task?\",\n    \"answer\": \"I created a new task\"\n}\n"
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "get tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e398a40-89fa-4451-bc99-57613b06264d",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response is an array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Each element in the array has an id, text, answer, and title property\", function () {",
											"    pm.response.json().forEach(function(task) {",
											"        pm.expect(task).to.have.property('id');",
											"        pm.expect(task).to.have.property('text');",
											"        pm.expect(task).to.have.property('answer');",
											"        pm.expect(task).to.have.property('title');",
											"    });",
											"});",
											"",
											"let template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>Title</th>",
											"        <th>Text</th>",
											"        <th>Answer</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{title}}</td>",
											"            <td>{{text}}</td>",
											"            <td>{{answer}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());",
											"",
											"let jsonBody = pm.response.json();",
											"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
											"pm.collectionVariables.get(\"id\", jsonBody.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "51e3dada-114d-43a2-a6e7-ada072592b08",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{id_token}}"
									}
								],
								"url": {
									"raw": "{{baseURL}}/api/tasks?page=0&size=70",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "70"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get task_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "06280869-1660-433e-916f-331ab0e1a3de",
										"exec": [
											"pm.collectionVariables.get(\"id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e2b7e8c3-ead2-49cc-8152-5924b0d4cd47",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"let jsonBody = pm.response.json();",
											"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
											"pm.collectionVariables.get(\"id\", jsonBody.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f3fd49ed-225a-4300-be75-1ac8813c0f43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{id_token}}"
									}
								],
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update all info task_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "660681f5-3bb2-4f3a-b5b1-fb38978d293f",
										"exec": [
											"pm.collectionVariables.get(\"id\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df6fe1b3-42ee-4cd4-a06c-244b94a89f8a",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id).to.be.a('number', \"'id' field should be a number\");",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
											"});",
											"",
											"pm.test(\"Validate the 'text' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"The 'answer' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Validate the 'title' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"let jsonBody = pm.response.json();",
											"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
											"pm.collectionVariables.get(\"id\", jsonBody.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5f5af57a-ec26-43e1-98db-35d42fce94aa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{id}},\n  \"text\": \"Do you create a new task?\",\n  \"answer\": \"I do create a new task number is {{id}}\",\n  \"title\": \"Create a new task\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get task after put update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cde356a9-c910-4f13-9e95-76c99c6c8cf0",
										"exec": [
											"pm.collectionVariables.get(\"id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "17e9db3e-bb48-463b-af53-67c0af59e884",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"let jsonBody = pm.response.json();",
											"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
											"pm.collectionVariables.get(\"id\", jsonBody.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6a0318a4-db59-4522-acf9-d3227e104007",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									}
								],
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update info task_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de4b770d-d4fc-4b96-b006-18dd4949712f",
										"exec": [
											"pm.collectionVariables.get(\"id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "44bf6923-5ca4-40c2-ac2e-b94ed727cd06",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id).to.be.a('number', \"'id' field should be a number\");",
											"    pm.expect(responseData.id).to.be.at.least(0, \"'id' field should be a non-negative integer\");",
											"});",
											"",
											"pm.test(\"Validate the 'text' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"The 'answer' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.answer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Validate the 'title' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"let jsonBody = pm.response.json();",
											"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
											"pm.collectionVariables.get(\"id\", jsonBody.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f964277c-9ef6-4e8e-a5ef-aa0625c60043",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{id}},\n  \"text\": \"Will you create one more task?\",\n  \"answer\": \"I will continue to create task number is {{id}} + 1\",\n  \"title\": \"Create a new task\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get task after patch update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "70dcf958-7103-44b7-a5f5-0106cd20256d",
										"exec": [
											"pm.collectionVariables.get(\"id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49180420-fa09-4ae9-a451-9dc088b9c9c6",
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e5489967-365d-4879-9415-4d60b31a8a88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete task_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5f76652-da5a-43b6-b065-adae853fcc65",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8a8ff9f3-0bb4-4392-aaf9-e3c026390597",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{id_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/tasks/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"tasks",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "a01650b7-f0d2-4702-b905-b54ee4a4bbf3"
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Create task with empty datas",
							"item": [
								{
									"name": "create task",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f86d3d87-5853-4c6d-87b2-ee4205a21535",
												"exec": [
													"let jsonBody = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"id\", jsonBody.id);",
													"pm.collectionVariables.set(\"id\", jsonBody.id);",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"  const responseBody = pm.response.text();",
													"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
													"});",
													"pm.test(\"Response body is in JSON format\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
													"});",
													"pm.test(\"Response headers contain the expected content type\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Status code name is Not Found\", function () {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
													"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
													"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
													"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ec1c86a5-9e48-4569-8a93-d3ec48b1216d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
											},
											{
												"key": "Cookie",
												"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
											},
											{
												"key": "Referer",
												"value": "http://localhost:8080/task?page=1&sort=id,asc"
											},
											{
												"key": "Sec-Fetch-Dest",
												"value": "empty"
											},
											{
												"key": "Sec-Fetch-Mode",
												"value": "cors"
											},
											{
												"key": "Sec-Fetch-Site",
												"value": "same-origin"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Origin",
												"value": "http://localhost:8080"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"\",\n    \"text\": \"1\",\n    \"answer\": \"1\"\n}\n"
										},
										"url": {
											"raw": "{{baseURL}}/api/tasks",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"tasks"
											]
										}
									},
									"response": []
								}
							],
							"id": "96d54b6d-2aa3-45ee-adb2-b539487ce9e6"
						},
						{
							"name": "Create task with int",
							"item": [
								{
									"name": "create task",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccb78d32-7c6c-4c3f-999e-2aec0c0f0062",
												"exec": [
													"let jsonBody = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"id\", jsonBody.id);",
													"pm.collectionVariables.set(\"id\", jsonBody.id);",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"  const responseBody = pm.response.text();",
													"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
													"});",
													"pm.test(\"Response body is in JSON format\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
													"});",
													"pm.test(\"Response headers contain the expected content type\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Status code name is Not Found\", function () {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
													"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
													"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
													"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "982f1117-aafe-4739-b25a-b83450ec33ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
											},
											{
												"key": "Cookie",
												"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
											},
											{
												"key": "Referer",
												"value": "http://localhost:8080/task?page=1&sort=id,asc"
											},
											{
												"key": "Sec-Fetch-Dest",
												"value": "empty"
											},
											{
												"key": "Sec-Fetch-Mode",
												"value": "cors"
											},
											{
												"key": "Sec-Fetch-Site",
												"value": "same-origin"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Origin",
												"value": "http://localhost:8080"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": 2,\n    \"text\": 5,\n    \"answer\": \"1\"\n}\n"
										},
										"url": {
											"raw": "{{baseURL}}/api/tasks",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"tasks"
											]
										}
									},
									"response": []
								}
							],
							"id": "557b0367-21ee-408e-9472-56b59ed55e35"
						},
						{
							"name": "Create task without required datas",
							"item": [
								{
									"name": "create task",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb165d22-efdb-44f9-aa22-f7d60df4f471",
												"exec": [
													"let jsonBody = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"id\", jsonBody.id);",
													"pm.collectionVariables.set(\"id\", jsonBody.id);",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"  const responseBody = pm.response.text();",
													"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
													"});",
													"pm.test(\"Response body is in JSON format\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
													"});",
													"pm.test(\"Response headers contain the expected content type\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Status code name is Not Found\", function () {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
													"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
													"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
													"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
													"});",
													"",
													"pm.test(\"ID is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
													"    pm.expect(responseData.id).to.be.at.least(0);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bac1696f-8ad3-4d4a-ae5d-eaaf737a0df0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{id_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/plain, */*",
												"disabled": true
											},
											{
												"key": "Accept-Language",
												"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDE0NTIzMCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDAwNTg4MzB9.cxGuQQikst0mlmx-smJvap92huzpX32HZ0_yhMAP8SyUVRvJiN7-FECAiF7maSoYwLp373wOxy9hbGBwRqh4BA"
											},
											{
												"key": "Cookie",
												"value": "Webstorm-477bfb66=fe2764b1-cf24-4190-b17a-b4d72a3c50d4"
											},
											{
												"key": "Referer",
												"value": "http://localhost:8080/task?page=1&sort=id,asc"
											},
											{
												"key": "Sec-Fetch-Dest",
												"value": "empty"
											},
											{
												"key": "Sec-Fetch-Mode",
												"value": "cors"
											},
											{
												"key": "Sec-Fetch-Site",
												"value": "same-origin"
											},
											{
												"key": "sec-ch-ua",
												"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
											},
											{
												"key": "sec-ch-ua-mobile",
												"value": "?0"
											},
											{
												"key": "sec-ch-ua-platform",
												"value": "\"macOS\""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Origin",
												"value": "http://localhost:8080"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // \"title\": 2,\n    // \"text\": 5,\n    \"answer\": \"1\"\n}\n"
										},
										"url": {
											"raw": "{{baseURL}}/api/tasks",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"tasks"
											]
										}
									},
									"response": []
								}
							],
							"id": "77de2d3c-6c68-44fa-8aa6-c9804d01cee8"
						}
					],
					"id": "c0b8a38b-4f81-4dd5-80c7-46c4ade5450c"
				}
			],
			"id": "150480c0-43ad-4b67-8695-f3ebc3264848"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ee32fe7d-e9df-4719-9ad3-5b73ab36c514",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f529ae62-83e9-4e8b-8174-901ecf6ac881",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6345af6f-44ce-468d-80ca-96644bccf87c",
			"key": "baseURL",
			"value": "http://localhost:8080"
		},
		{
			"id": "83338a1c-e9ec-4d2d-a2ec-6e1e12c5370d",
			"key": "id",
			"value": "{{id}}"
		},
		{
			"id": "b95582fd-81bd-448a-af5a-2db6d86c8800",
			"key": "id_token",
			"value": "{{id_token}}"
		}
	]
}
